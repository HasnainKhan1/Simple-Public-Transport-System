/* position_publisher.cxx

   A publication of data of type Position

   This file is derived from code automatically generated by the rtiddsgen
   command:

   rtiddsgen -language C++ -example <arch> position.idl

   Example publication of type Position automatically generated by
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription with the command
       objs/<arch>/position_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs/<arch>/position_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and
       multicast receive addresses via an environment variable or a file
       (in the current working directory) called NDDS_DISCOVERY_PEERS.

   You can run any number of publishers and subscribers programs, and can
   add and remove them dynamically from the domain.


   Example:

       To run the example application on domain <domain_id>:

       On Unix:

       objs/<arch>/position_publisher <domain_id> o
       objs/<arch>/position_subscriber <domain_id>

       On Windows:

       objs\<arch>\position_publisher <domain_id>
       objs\<arch>\position_subscriber <domain_id>


modification history
------------ -------
*/
#include <stdio.h>
#include <stdlib.h>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "position.h"
#include "positionSupport.h"
#include "accident.h"
#include "accidentSupport.h"
#include "ndds/ndds_cpp.h"
#include <ctime>
#include <string.h>
#include <iostream>
#include <sstream>
#include <unistd.h>
#include <cstdlib>
#include <fcntl.h>
#include <pthread.h>

#define SSTR(x) dynamic_cast< std::ostringstream & >((std::ostringstream() << std::dec << x )).str()
using namespace std;
double accidentP=0.1;

char routename_b[5][10];
char global_routename[10];
int numRoutes;
char backupbus[5][5][6];
char coming_bc[6];
//char leaving_bc[5][6];
int backup_num[5];


struct thread_data{
    int counter;
    char leaving_bc[6];
};


static int publisher_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
/*
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
*/

    return status;
}


extern "C" int publisher_main(int domainId, int sample_count, char *routename, char *bus_name,long routenumStops, double timebetweenstop)
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
    DDSDataWriter *writer = NULL;

    //declare for position
    DDSTopic *topic = NULL;
    PositionDataWriter * Position_writer = NULL;
    Position *instance = NULL;
    const char *type_name = NULL;

    //declare for accident
    DDSTopic *accident_topic = NULL;
    AccidentDataWriter *accident_writer = NULL;
    Accident *accident_instance = NULL;
    const char *accident_type_name = NULL;


    DDS_ReturnCode_t retcode;
    DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
    int count = 0;
    DDS_Duration_t send_period = {4,0};
    DDS_DataWriterQos modified_datawriter_qos;
    int i, j,k;

    char *traffic[20]={"heavy","heavy","light","light","light","light","light","normal","normal","normal","normal","normal","normal","normal","normal","normal","normal","normal","normal","normal"}; //heavy=10%  light=25%  normal=65%
     int traffic_rand;
    int location=0;
    long ratio=0;
    string timestamp;

    time_t t;
    struct tm * now;
    FILE * pFile;
    pthread_t ptd[5];
    struct thread_data ptd_data[5];

    /* To customize participant QoS, use
       the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT,
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize publisher QoS, use
       the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        printf("create_publisher error\n");
        publisher_shutdown(participant);
        return -1;
    }

    ///Register type
    /* Register type before creating postion topic */
    type_name = PositionTypeSupport::get_type_name();
    retcode = PositionTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }
    /* Register type before creating accident topic */
    accident_type_name = AccidentTypeSupport::get_type_name();
    retcode = AccidentTypeSupport::register_type(
        participant, accident_type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }



    ///create topic
    /* To customize topic QoS, use
       the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Position",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }

    accident_topic = participant->create_topic(
        "Accident",
        accident_type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (accident_topic == NULL) {
        printf("create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }



    /*
    //set Qos Policy
    publisher->get_default_datawriter_qos(modified_datawriter_qos);
    modified_datawriter_qos.reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;
    modified_datawriter_qos.reliability.max_blocking_time.sec = 10;
    */

    /* To customize data writer QoS, use
       the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic,  DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        printf("create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }
    Position_writer = PositionDataWriter::narrow(writer);
    if (Position_writer == NULL) {
        printf("PositionDataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

     writer = publisher->create_datawriter(
        accident_topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        printf("create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }
    accident_writer = AccidentDataWriter::narrow(writer);
    if (accident_writer == NULL) {
        printf("AccidentDataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Create data sample for writing */

    instance = PositionTypeSupport::create_data();

    if (instance == NULL) {
        printf("PositionTypeSupport::create_data error\n");
        publisher_shutdown(participant);
        return -1;
    }

    accident_instance = AccidentTypeSupport::create_data();
    if (accident_instance == NULL) {
        printf("AccidentTypeSupport::create_data error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* For a data type that has a key, if the same instance is going to be
       written multiple times, initialize the key here
       and register the keyed instance prior to writing */
/*
    instance_handle = Position_writer->register_instance(*instance);
*/
    //wait a while....
    sleep(10);
    double tempTimeBetweenStops;
    double double_rand;
    char temproute[10];
    int thread_counter = 0;



    /* Main loop */
    for (count=0; count < 3*routenumStops ; ++count) {

        /* Modify the data to be sent here */

        //timestamp
        t = time(0);
        now = localtime( & t );
        timestamp="";
        timestamp.append(SSTR(now->tm_hour)).append(":").append(SSTR(now->tm_min)).append(":").append(SSTR(now->tm_sec));
        strcpy(instance->timestamp, timestamp.c_str());

        //traffic condition
        traffic_rand=rand()%20;
        if(traffic_rand==0)  //heavy
        {
            tempTimeBetweenStops= 1.25 *timebetweenstop;
        }
        else if(traffic_rand==1) //light
        {
            tempTimeBetweenStops= 0.75 *timebetweenstop;
        }
        else
            tempTimeBetweenStops= timebetweenstop; //normal

        strcpy(instance->trafficConditions, traffic[traffic_rand]);

        strcpy(instance->route,routename );
        strcpy(instance->vehicle, bus_name);
        instance->stopNumber = location+1;
        instance->numStops = routenumStops;

        //accident
        srand48((long int)bus_name+ (long int)t);
        double_rand = drand48();
        if(double_rand < accidentP)
        {

            //send accident message
            tempTimeBetweenStops= tempTimeBetweenStops+10;
            strcpy(accident_instance->route,routename );
            strcpy(accident_instance->vehicle, bus_name);
            strcpy(accident_instance->timestamp, timestamp.c_str());
            accident_instance->stopNumber =  location+1;
            printf("%s published an accident message at stop #%d on route %s at %d:%d:%d\n", bus_name, location+1,routename,now->tm_hour, now->tm_min, now->tm_sec);
            retcode = accident_writer->write(*accident_instance, instance_handle);

            if (retcode != DDS_RETCODE_OK) {
                printf("write error %d\n", retcode);
            }
        }

        instance->fillInRatio = rand()%101;  //range from 0~100


        instance->timeBetweenStops = tempTimeBetweenStops;



        //send position message only when there is no breakdown
        printf("%s published a position message at stop #%d on route %s at %d:%d:%d\n", bus_name, location+1,routename,now->tm_hour, now->tm_min, now->tm_sec);
        retcode = Position_writer->write(*instance, instance_handle);
        if (retcode != DDS_RETCODE_OK) {
            printf("write error %d\n", retcode);
        }
        location++;
        location= location%routenumStops;
        send_period={tempTimeBetweenStops,0};


        NDDSUtility::sleep(send_period);


    }

/*
    retcode = Position_writer->unregister_instance(
        *instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("unregister instance error %d\n", retcode);
    }
*/

    /* Delete data sample */
    retcode = PositionTypeSupport::delete_data(instance);
    if (retcode != DDS_RETCODE_OK) {
        printf("PositionTypeSupport::delete_data error %d\n", retcode);
    }

    retcode = AccidentTypeSupport::delete_data(accident_instance);
    if (retcode != DDS_RETCODE_OK) {
        printf("AccidentTypeSupport::delete_data error %d\n", retcode);
    }

    /* Delete all entities */
    return publisher_shutdown(participant);
}


int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; //infinite loop
    char routename[10];
    char bus_name[6];
    int routenumStops=0;
    double timebetweenstop=0;

    strcpy(routename, "routename");
    strcpy(bus_name, "bus00");

    if (argc >= 2) {
        strcpy(routename, argv[1]);
        strcpy(global_routename, argv[1]);
    }
    if (argc >= 3) {
        strcpy(bus_name, argv[2]);
    }
    if (argc >= 4) {
        routenumStops = atoi(argv[3]);
    }
    if (argc >= 5) {
        timebetweenstop = atof(argv[4]);
    }
    if (argc >= 6) {
        accidentP = atof(argv[5]);
    }
    if(argc >= 7){
        numRoutes = atoi(argv[6]);
    }

    return publisher_main(domainId, sample_count,routename, bus_name,routenumStops, timebetweenstop);
}


